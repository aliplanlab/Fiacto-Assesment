import 'dart:convert';

import 'package:common/common.dart';
import 'package:common/widgets/custom_alert_dialog.dart';
import 'package:fiacto/auth/auth_cubit/auth_cubit.dart';
import 'package:fiacto/authenticatorActivation/cubit/authenticator_activation_cubit.dart';
import 'package:fiacto/widgets/custom_app_bar.dart';
import 'package:fiacto/widgets/custom_pinput.dart';
import 'package:fiacto/widgets/custom_title_subtitle.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:formz/formz.dart';

class AuthenticatorActivationView extends StatelessWidget {
  const AuthenticatorActivationView({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBarWidget(
        title: 'Verification',
        centerTitle: true,
        showLeading: true,
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const CustomTitleSubtitle(
                title: 'Authenticator App',
                subtitle:
                    'Use a mobile app like Google Authenticator to generate verification codes.',
              ),
              const SizedBox(height: 32),
              CustomTitleSubtitle(
                titleStyle: context.sixteen600,
                subtitleStyle: context.sixteen400,
                title: '1. Download App',
                subtitle:
                    'Install your Authenticator app on your device. Available for iOS and Android.',
              ),
              const SizedBox(height: 32),
              CustomTitleSubtitle(
                titleStyle: context.sixteen600,
                subtitleStyle: context.sixteen400,
                title: '2. Scan QR Code',
                subtitle: 'Scan this QR code using the app.',
              ),
              const SizedBox(height: 16),
              const _QRCodeWidget(),
              const SizedBox(height: 24),
              // Center(
              //   child: Text(
              //     "Can't scan the QR? Enter the key manually.",
              //     style: context.sixteen400,
              //   ),
              // ),
              // const SizedBox(height: 24),
              // const _SecretImage(),
              // const SizedBox(height: 30),
              CustomTitleSubtitle(
                titleStyle: context.sixteen600,
                subtitleStyle: context.sixteen400,
                title: '3. Finish Setup',
                subtitle: 'Enter the verification code generated by your app.',
              ),
              const SizedBox(height: 16),
              Text(
                'Enter the 6-Digit Code',
                style: context.twenty600.withColor(Colors.black),
              ),
              const SizedBox(height: 8),
              Text(
                'Enter the code from your app',
                style: context.fourteen400.withColor(context.grey500),
              ),
              const SizedBox(height: 24),
              BlocBuilder<
                AuthenticatorActivationCubit,
                AuthenticatorActivationState
              >(
                buildWhen: (previous, current) => previous.code != current.code,
                builder: (context, state) {
                  return CustomPinputWidget(
                    onChanged: (p0) {
                      context
                          .read<AuthenticatorActivationCubit>()
                          .updateAuthenticatorCode(p0);
                    },
                  );
                },
              ),
              const SizedBox(height: 24),
              Text(
                'The code refreshes every 30 seconds',
                style: context.fourteen400.withColor(context.grey500),
              ),
              const SizedBox(height: 24),
              _VerifyAndEnableButton(),
            ],
          ),
        ),
      ),
    );
  }
}

class _VerifyAndEnableButton extends StatelessWidget {
  const _VerifyAndEnableButton();

  @override
  Widget build(BuildContext context) {
    return MultiBlocListener(
      listeners: [
        BlocListener<
          AuthenticatorActivationCubit,
          AuthenticatorActivationState
        >(
          listenWhen:
              (previous, current) =>
                  previous.activationDataState != current.activationDataState,
          listener: (context, state) {
            if (state.activationDataState.isFailure) {
              context.errorSnackbar(state.activationDataState.errorMessage);
            } else if (state.activationDataState.isLoaded) {
              context.read<AuthenticatorActivationCubit>().updateMFAStatus();
            }
          },
        ),
        BlocListener<
          AuthenticatorActivationCubit,
          AuthenticatorActivationState
        >(
          listenWhen:
              (previous, current) =>
                  previous.builderUpdateDataState !=
                  current.builderUpdateDataState,
          listener: (context, state) {
            if (state.builderUpdateDataState.isFailure) {
              context.errorSnackbar(state.builderUpdateDataState.errorMessage);
            } else if (state.builderUpdateDataState.isLoaded) {
              context.read<AuthCubit>().getUserBuilder();
            }
          },
        ),
        BlocListener<AuthCubit, AuthState>(
          listenWhen:
              (previous, current) =>
                  previous.getUserDataState != current.getUserDataState,
          listener: (context, state) async {
            if (state.getUserDataState.isFailure) {
              context.errorSnackbar(state.getUserDataState.errorMessage);
            } else if (state.getUserDataState.isLoaded) {
              final data =
                  context.read<AuthCubit>().state.getUserDataState.data;
              if (data == null) return;

              showDialog<CustomAlertDialog>(
                context: context,
                builder:
                    (context) => const CustomAlertDialog(
                      title: '2F Authentication Activated!',
                      subTitle:
                          'Your setup is complete. Use your Google Authenticator app to generate OTP.',
                    ),
              );
              await Future<void>.delayed(const Duration(seconds: 3));
              if (!context.mounted) return;
              Navigator.pop(context);
              final token = context.read<AuthRepository>().currentUser.token;
              context.read<AuthRepository>().updateUser(
                User.fromEntity(data, token),
              );
            }
          },
        ),
      ],
      child: BlocBuilder<
        AuthenticatorActivationCubit,
        AuthenticatorActivationState
      >(
        buildWhen:
            (previous, current) =>
                previous.status != current.status ||
                previous.activationDataState != current.activationDataState,
        builder: (context, state) {
          return CustomElevatedButton.expanded(
            text: 'Verify & Enable 2FA',
            enabled: state.status.isValidated,
            loading: state.activationDataState.isLoading,
            onPressed: () {
              context
                  .read<AuthenticatorActivationCubit>()
                  .veridyAuthenticatorCode();
            },
          );
        },
      ),
    );
  }
}

class _QRCodeWidget extends StatelessWidget {
  const _QRCodeWidget();

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<
      AuthenticatorActivationCubit,
      AuthenticatorActivationState
    >(
      builder: (context, state) {
        if (state.qrImageState.isLoading) {
          return const CircularProgressIndicator();
        }
        if (state.qrImageState.isLoaded &&
            state.qrImageState.data?.qrCode != null) {
          final result = state.qrImageState.data?.qrCode ?? '';
          final results = const Base64Decoder().convert(result.split(',').last);
          return Center(child: Image.memory(results, height: 150, width: 150));
        }
        return CustomError(
          message: state.qrImageState.errorMessage,
          emptyMessage: 'No QR code Image found',
          isFailure: state.qrImageState.isFailure,
          onRetry: context.read<AuthenticatorActivationCubit>().getQRCodeImage,
        );
      },
    );
  }
}

class _SecretImage extends StatelessWidget {
  const _SecretImage();

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.all(8),
      width: double.infinity,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(4),
        color: context.grey50,
      ),
      child: BlocBuilder<
        AuthenticatorActivationCubit,
        AuthenticatorActivationState
      >(
        buildWhen:
            (previous, current) =>
                previous.secretKeyState != current.secretKeyState,
        builder: (context, state) {
          if (state.secretKeyState.isLoading) {
            return const CustomProgress.medium();
          }
          if (state.secretKeyState.isLoaded &&
              state.secretKeyState.data?.secretKey != null) {
            return SelectableText(
              state.secretKeyState.data?.secretKey ?? 'No Key Found',
              style: context.sixteen400,
            );
          }
          return CustomError(
            message: state.secretKeyState.errorMessage,
            emptyMessage: 'No Key Found',
            isFailure: state.secretKeyState.isFailure,
            onRetry: context.read<AuthenticatorActivationCubit>().getSecretKey,
          );
        },
      ),
    );
  }
}
